How to search for repository objects:
    1. SE84 - Access ABAP Repository Information System (also accessed through SE80?)
            Access Program Library
                Access Programs, here we can search, display and execute programs.
                
    2. SE81 - Application Hierarchy

Abap Workbench includes all tools required for creating and editing
repository objects, covering the entire software developing cycle:
    SE38 - ABAP Editor: editing the source code
    SE11 - ABAP Dictionary: editing table definitions, data types, ...
    SE51 - Screen Painter: configuring screens with functions in user dialogs
    SE41 - Menu Painter: designing user interface components
    SE37 - Function builder: maintaining function modules
    SE24 - Class builder: maintaining global classes and interfaces

Creating a package:
    Access SE80 Object Navigator
        In the drop-down menu, select Package, enter package name and press return
        In the dialog box, enter a short description of your package. Assign the
            package to an application component and a software component
        In the following dialog box, assign the package to a change request
            (or create a new change request in the sheet icon)

Creating a transaction:
    Access SE80 Object Navigator
        Right click on your program, 'Create' -> 'Transaction'
        Define a transaction code
        Enter a short text
        Select 'Program and Selection Screen (Report Transaction)'
            Select the program name
            Choose 'Professional User Transaction'
            Select 'SAP GUI for Windows'
        Assign the trx to a package and to a change request

Loop types:
    DO.
        *statements* (loop counter: sy-index)
    IF <abort_condition>. EXIT. ENDIF.

    DO n TIMES.
        *statements* (loop counter: sy-index)
    ENDDO.

    WHILE <condition>.
        *statements* (loop counter: sy-index)
    ENDWHILE.

    SELECT ... FROM <dbtab> ....
        statements* (Database table rows: sy-dbcnt)
    ENDSELECT.

    LOOP AT <internal table> ....
        statements* (Row index for internal table: sy-tabix)
    ENDLOOP.

Useful System Fields:
    sy-mandt: Logon client
    sy-uname: Logon username
    sy-langu: Logon user language
    sy-datum: Local ABAP system date
    sy-uzeit: Local ABAP system time
    sy-tcode: Current tansaction code
    sy-repid: Current ABAP program
    sy-index: Loop counter at DO and WHILE
    sy-subrc: Indicate whether the statement could be executed succesfully (sy-subrc = 0)

Dialog messages:
    MESSAGE tnnn(message_class).
    Where a type 't' and a message number 'nnn' are set and attributed to a message class.
    t / meaning / behaviour / appears in
    ------------------------------------
    i / Info / Program continues after breakpoint / Modal dialog box
    s / Set / Program continues without brakpoint / Status bar of next screen
    w / Warning / Context-dependent / Status bar
    e / Error / Context-dependent / Status bar
    a / Termination / Program terminated / Modal dialog box
    x / Short dump / dump MESSAGE_TYPE_X / Short dump

Ways to debug:
    1. To start a program in debug mode:
        Right click on program (in SE80), then 'Execute', then 'Debugging' or
        Set a breakpoint in the desired program line
    2. To start debugging mode at runtime:
        Execute the program, type '/h' in command field and hit Enter or
        Access 'System' menu, 'Utilities', 'Debug ABAP'

Modularization techniques
    1. Local Program Modularization (can be used only by the program itself):
        1.1 Subroutines (always part of the main program)
            Pass types:
                Call by value: pass the global variable to subroutine as a variable copy
                Call by value and result: pass the global variable to subroutine as a copy and write the processed value back to the original
                Call by reference: run subroutine directly on the specified parameter
            
            FORM subroutine_name USING 
            ENDFORM.



        1.2 Methods in local classes
    2. Global Modularization (can be used by any number of programs at the same time):
        2.1 Function Modules organized in Function Groups
        2.2 Methods in global classes

